
app.js
const express = require("express");
const connectDB = require("./database");
const passport = require("passport");
const app = express();
const port = 8000;

const { localStrategy, jwtStrategy } = require("./passport");
const categoriesrouter = require("./apis/categories/routes");
const ingredientsRouter = require("./apis/ingredients/routes");
const recipesRouter = require("./apis/recipes/routes");
const usersRouter = require("./apis/users/routes");

app.use(express.json());
app.use(passport.initialize());
passport.use(localStrategy);
passport.use(jwtStrategy);
app.use("/api/categories", categoriesrouter);
app.use("/api/ingredients", ingredientsRouter);
app.use("/api/recipes", recipesRouter);
app.use("/api/users", usersRouter);

connectDB();

app.listen(port, () => {
  console.log(`Server running at ${port}`);
});

passport.js
const bcrypt = require("bcrypt");
const LocalStrategy = require("passport-local").Strategy;
const JWTStrategy = require("passport-jwt").Strategy;
const { fromAuthHeaderAsBearerToken } = require("passport-jwt").ExtractJwt;
const { JWT_SECRET } = require("./key");

const User = require("./apis/users/models/User");

exports.localStrategy = new LocalStrategy(
  { usernameField: "username" },
  async (name, password, done) => {
    try {
      const user = await User.findOne({ name });
      const passwordsMatch = user
        ? await bcrypt.compare(password, user.password)
        : false;
      if (passwordsMatch) {
        return done(null, user);
      } else {
        done(null, false);
      }
    } catch (error) {
      done(error);
    }
  }
);

key.js
module.exports = {
  JWT_SECRET: "asupersecretkey",
  JWT_EXPIRATION_MS: 900000,
};

account controllers.js
const bcrypt = require("bcrypt");
const User = require("./models/User");
const jwt = require("jsonwebtoken");
const { JWT_SECRET, JWT_EXPIRATION_MS } = require("../../key");

exports.registerUser = async (req, res) => {
  const saltRounds = 10;
  req.body.password = await bcrypt.hash(req.body.password, saltRounds);

  try {
    const user = User(req.body);
    await user.save();
    const payload = {
      id: user.id,
      name: user.username,
      exp: Date.now() + JWT_EXPIRATION_MS,
    };
    const token = jwt.sign(JSON.stringify(payload), JWT_SECRET);
    res.status(201).json({ token: token });
  } catch (e) {
    console.log(e.message);
    res.status(400).json(e.message);
  }
};

exports.logoutUser = async (req, res) => {
  const users = await User.find({ session: `${req.body.token}` });
  if (users.length > 0) {
    const user = users[0];
    user.session = null;
    await user.save();
  }
  res.status(200).json();
};

exports.loginUser = async (req, res) => {
  const { user } = req;
  const payload = {
    id: user.id,
    username: user.name,
    exp: Date.now() + parseInt(JWT_EXPIRATION_MS),
  };
  const token = jwt.sign(JSON.stringify(payload), JWT_SECRET);
  res.json({ token });
};

---------- from recity controllers
// to create a New Recipes
// const creatNewRecipes = async (newRecipesData) => {
//   console.log("Creating new Category", newRecipesData);
//   const newRecipes = await Recipe.create(newRecipesData);
//   return newRecipes;
// };
// exports.creatRecipesController =async (req, res) => {
//   try {
//     if (req.file) {
//       req.body.image = `http://${req.get("host")}/media/${req.file.filename}`; //updated file to upload image
//     }
//     const newRecipes = await creatNewRecipes(req.body);
//     res.status(201).json(newRecipes);
//   } catch (e) {
//     res.status(500).json(e.message);
//     console.log(e.message);
//   }
// };

------------------------ JWT file in passport
exports.jwtStrategy = new JWTStrategy(
  {
    jwtFromRequest: fromAuthHeaderAsBearerToken(),
    secretOrKey: JWT_SECRET,
  },
  async (jwtPayload, done) => {
    if (Date.now() > jwtPayload.exp) {
      console.log("jwt expired");
      return done(null, false);
    }
    try {
      const user = await User.findById(jwtPayload.id);
      done(null, user);
    } catch (error) {
      done(error);
    }
  }
);

